{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { throwError, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { User } from './user';\nimport { UserNameAlreadyUsedError } from './user-name-already-used-error';\nimport { API_URL } from '../api/api';\nimport { UserHasActiveBorrowsError } from './user-has-active-borrows-error';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient, apiUrl) {\n      this.httpClient = httpClient;\n      this.apiUrl = apiUrl;\n    }\n    getAll(options = {}) {\n      let parameters = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, options.idFilter !== undefined && {\n        \"id-filter\": options.idFilter.toString()\n      }), options.userNameFilter !== undefined && {\n        \"user-name-filter\": options.userNameFilter\n      }), options.firstNameFilter !== undefined && {\n        \"first-name-filter\": options.firstNameFilter\n      }), options.lastNameFilter !== undefined && {\n        \"last-name-filter\": options.lastNameFilter\n      }), options.emailFilter !== undefined && {\n        \"email-filter\": options.emailFilter\n      }), options.isLibrarianFilter !== undefined && {\n        \"is-librarian-filter\": options.isLibrarianFilter.toString()\n      }), options.isAdministratorFilter !== undefined && {\n        \"is-administrator-filter\": options.isAdministratorFilter.toString()\n      });\n      return this.httpClient.get(`${this.apiUrl}/users/index.php`, {\n        params: parameters\n      }).pipe(map(u => u.map(u => new User(u.id, u.userName, u.firstName, u.lastName, u.email, u.isLibrarian, u.isAdministrator))));\n    }\n    getById(id) {\n      return this.httpClient.get(`${this.apiUrl}/users/index.php?id=${id}`).pipe(map(u => new User(u.id, u.userName, u.firstName, u.lastName, u.email, u.isLibrarian, u.isAdministrator)));\n    }\n    getSignedIn() {\n      return this.httpClient.get(`${this.apiUrl}/users/index.php?id=`).pipe(catchError(e => e.status === 401 ? of(null) : throwError(e)), map(u => u === null ? null : new User(u.id, u.userName, u.firstName, u.lastName, u.email, u.isLibrarian, u.isAdministrator)));\n    }\n    add(user, password) {\n      let {\n          id\n        } = user,\n        withoutId = __rest(user, [\"id\"]);\n      let withPassword = Object.assign(Object.assign({}, withoutId), {\n        password\n      });\n      return this.httpClient.post(`${this.apiUrl}/users/index.php`, withPassword).pipe(catchError(e => e.status === 409 ? throwError(new UserNameAlreadyUsedError()) : throwError(e)), map(u => new User(u.id, u.userName, u.firstName, u.lastName, u.email, u.isLibrarian, u.isAdministrator)));\n    }\n    update(user, password) {\n      let userData = password === undefined ? user : Object.assign(Object.assign({}, user), {\n        password\n      });\n      return this.httpClient.put(`${this.apiUrl}/users/index.php?id=${user.id}`, userData).pipe(catchError(e => e.status === 409 ? throwError(new UserNameAlreadyUsedError()) : throwError(e)), map(u => new User(u.id, u.userName, u.firstName, u.lastName, u.email, u.isLibrarian, u.isAdministrator)));\n    }\n    remove(user) {\n      return this.httpClient.delete(`${this.apiUrl}/users/index.php?id=${user.id}`).pipe(catchError(e => e.status === 409 ? throwError(new UserHasActiveBorrowsError()) : throwError(e)));\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(API_URL));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}